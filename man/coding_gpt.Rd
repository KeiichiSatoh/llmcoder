% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/coding_gpt.R
\name{coding_gpt}
\alias{coding_gpt}
\title{Structured Content Coding with OpenAI GPT Models}
\usage{
coding_gpt(
  df,
  type_object_setting,
  which_col = 1,
  model = "gpt-4.1",
  include_df = TRUE,
  overall_instruction = NULL,
  base_url = "https://api.openai.com/v1",
  api_key = NULL,
  params = list(),
  seed = NULL,
  api_args = list(),
  echo = c("none", "output", "all"),
  nchar_warning_limit = 1e+05
)
}
\arguments{
\item{df}{A \code{data.frame} or vector containing the text to be processed.}

\item{type_object_setting}{A \code{TypeObject} created via \code{ellmer::type_object()}
that defines the expected structure of the output.}

\item{which_col}{A column name (character) or index (integer) indicating
which column of \code{df} contains the text input. Defaults to \code{1}.}

\item{model}{Character string specifying the OpenAI model to use. Defaults to
\code{"gpt-4.1"}. See https://platform.openai.com/docs/models for other models.}

\item{include_df}{Logical. If \code{TRUE}, the result is merged with the input \code{df}.
If \code{FALSE}, only the response is returned. Defaults to \code{TRUE}.}

\item{overall_instruction}{Optional character string to be passed as the
\code{system_prompt} to the chat model.}

\item{base_url}{The base URL for the OpenAI API. Defaults to \code{"https://api.openai.com/v1"}.}

\item{api_key}{Character string containing your OpenAI API key. If \code{NULL},
the key will be retrieved from the environment variable \code{"OPENAI_API_KEY"}.}

\item{params}{Optional list of additional parameters to pass to the model (e.g., temperature, max_tokens).}

\item{seed}{Optional integer seed that ChatGPT uses to try and make output
more reproducible.}

\item{api_args}{Additional API-specific arguments passed as a list.
Defaults to an empty list.}

\item{echo}{Character string indicating whether to print messages during execution.
Must be one of \code{"none"}, \code{"output"}, or \code{"all"}.}

\item{nchar_warning_limit}{Integer. If the total number of characters in the
input exceeds this threshold, a confirmation prompt will be displayed.
Defaults to \code{100000}.}
}
\value{
If \code{include_df = TRUE}, a \code{data.frame} with the original \code{df} and the
model's structured response. If \code{include_df = FALSE}, a list of structured outputs.
}
\description{
This function is a wrapper around the \code{chat_openai()} function from the
\code{ellmer} package, designed to facilitate structured text coding for data
stored in a \code{data.frame}.
It uses structured prompts with OpenAI GPT models to extract or generate structured
information based on a user-defined schema (\code{type_object_setting}).
}
\details{
The function supports token usage checking, user confirmation for long input,
and optionally merges the results back into the original data frame.

\strong{How to define a TypeObject:}

Below are examples of how to define a \code{TypeObject} using the \code{type_object()}
constructor:

Example 1: Simple type object

\preformatted{
    type_object(
      name = type_string(),
      age = type_number()
    )
}

Example 2: With custom instructions

\preformatted{
    type_object(
      name = type_string("Extracted entity name."),
      type = type_enum("Entity type: one of 'person', 'location', 'organization'"),
      age = type_number("Age in years.")
    )
}

Supported base types include:
\itemize{
\item \code{type_boolean()}: logical
\item \code{type_integer()}: integer
\item \code{type_number()} : double
\item \code{type_string()} : string, and
\item \code{type_enum()}   : categorical.
}

For more information, see the ellmer vignette:
\url{https://ellmer.tidyverse.org/articles/structured-data.html}

\strong{How to set the OpenAI API key:}

You can provide the API key directly via the \code{api_key} argument, or set it through an environment variable.

\emph{Option 1: Temporary environment variable (valid for current session)}
\preformatted{
    Sys.setenv(OPENAI_API_KEY = "your_key_here")
}

\emph{Option 2: Permanent setting via .Renviron}
\enumerate{
\item Open your \code{.Renviron} file: \code{file.edit("~/.Renviron")}
\item Add a line: \code{OPENAI_API_KEY=sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}
\item Save and restart your R session.
}
}
\examples{
\dontrun{
df <- data.frame(ID = 1:2, text = c("東京都渋谷区", "大阪府大阪市北区"))
schema <- type_object(city = type_string(), district = type_string())
result <- coding_gpt(df = df,
                     which_col = "text",
                     type_object_setting = schema, 
                     api_key = "[API_KEY]")               # set your OpenAI API KEY
}
}
